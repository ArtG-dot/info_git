
////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*installing GIT Bash and creating new repository*/

/*check if git is installed*/
git version


/*initialisation local repository <git_repo>*/
cd git_repo
git init


/*connection to remote repository*/
git remote add origin https://github.com/ArtG-dot/test_rep.git
git remote -v /*2 inits*/


////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*working with files in repository*/

/*create new file*/
touch test_f.txt
ls
echo "some txt" > test_f.txt
rm test_f.txt


/*to make file indexed*/
git add file.txt
--all changed files
git add .
/*to remove indexed file from cash*/
git rm --cashed file.txt


/*rollback file to previous commit state*/
git restore file.txt
/*rollback all files to previous commit state, but not remove new files*/
git restore .


/*git add + git commit, !!! only for indexed files*/
git commit -am 'message for commit'


/*add .gitkeep file to empty directory to add it to indexed cash*/
touch new_directory/.gitkeep


/*.gitignore allows hide some sensitive files + ignore rules*/


/*view history of commits*/
git log
git log --oneline
git log --oneline --all


/*HEAD - current state of our repository*/
/*undo the commit but keep your changes/
git reset <commit_hash>
-or
git reset HEAD~2 /*undo 2 previous commits, but keep changes*/


/*undo your commit but leave your files and your index/
git reset --soft HEAD~1
-or
git reset --soft <commit_hash>


/*undo your commit and remove all changes/
git reset --hard HEAD~1
-or
git reset --hard <commit_hash>
-or
--rollback changes in repository to the last commit
git reset --hard 

/*git reset - creates a new commit that undoes the changes from a previous commit. This command adds new history to the project (it doesn't modify existing history)*/


/*view all operations for repository*/
git reflog

/*cancel changes from specific previous commit and create new commit*/
git revert <commit_hash>
:wq

/*To remove (not revert) a commit that has been pushed to the server*/
git push origin master --force



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*working with remote repository*/


/*generating new ssh key*/
ssh-keygen
/*instal it on remote server - GITBash, Bitbucket...*/


/*clone repository from remote to local folder*/
git clone git@github.com:ArtG-dot/test_rep.git my_test_project


/*update current local branch*/
git pull


/update current local repository*/
git fetch


/*update remote branch*/
git push


/*update remote repository with creating new branch*/
git push -u origin dev



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*working with branches in repository*/


/*view all branches*/
git branch


/*create new branch from current branch*/
git branch <branch_name>


/*create new branch from current other branch*/
git branch <branch_name> <parent_branch_name>


/*checkout to new branch, create if not exists*/
git checkout -b <banch_name>


/*merge branch to master*/
git chekout master
git merge <branch_name>
git push


/*remove btanches*/
git branches -d <branch_name1> <branch_name2> /*on local rep*/
git push
git push --delete origin <branch_name1> <branch_name2> /*on remote rep*/


/*change point when branch has been created, moving of branch begin commit*/
git chekout <branch_name1>
git rebase master
git push
git push --force



////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*working with tags*/


/*marking commit as version 1.0.0*/
git tag 1.0.0 
git tag


/*list of tags*/
git tag --list


/*push tags to remote rep*/
git push --tags /*+release in remote rep*/


/*remove tag from local rep*/
git tag -d 1.0.1


/*remove tag from remote  rep*/
git push --delete origin 1.0.1


/*to save uncommitted changes if you want not to lose changes when checkout to other branch*/
git stash
git stash list
git stash pop <stash_name>


/*union commits in a single one*/
1. option (when you merge to new branch)
--some commits on dev branch
git chekout master
git merge dev --squash

2. option (union 3 last commits in a single for current branch)
git rebase -i HEAD~3
	pick <hash> commit
	f <hash> commit
	f <hash> commit
	:wq
git push --force /*to change in remote rep*/


/*add some single commit from other branch*/
git cherry-pick <hash-commit>

/*only last commit*/
git cherry-pick <branch>
/*all commits*/
git cherry-pick ..<branch> --all commits



/*update/rewrite last commit*/
/*do the changes*/
git add .
git commit --amend
:wq
git push --force /*for remote rep*/


////////////////////////////////////////////////
////////////////////////////////////////////////
////////////////////////////////////////////////
/*conflicts*/

/*cancel mer*/